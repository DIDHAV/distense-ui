#!/usr/bin/env node

const _ = require('lodash')
const pull = require('pull-stream')
const toPull = require('stream-to-pull-stream')
const gitRemoteHelper = require('pull-git-remote-helper')
const multicb = require('multicb')

console.log = () => null

const { pullPromisedArray, gitHash } = require('../lib/util')
const Repo = require('../lib/Repo')

const repo = new Repo(process.argv[3])

const helper = gitRemoteHelper({
  refs: _.constant(pullPromisedArray(repo.getAllRefs())),

  symrefs: _.constant(pullPromisedArray(repo.getAllSymRefs())),

  hasObject: (hash, cb) => {
    repo.hasObject(hash).then(hasObject => {
      cb(null, hasObject)
    }).catch(err => cb(err))
  },

  getObject: (hash, cb) => {
    repo.getObject(hash).then(({ type, data }) => {
      cb(null, {
        type,
        length: data.length,
        read: pull.once(data)
      })
    }).catch(err => {
      console.error('getObject err', err)
      cb(err)
    })
  },

  update: (readUpdates, readObjects, cb) => {
    const done = multicb({ pluck: 1 })
    const doneReadingUpdates = done()
    const doneReadingObjects = done()

    readUpdates(null, function nextUpdate(end, update) {
      if (end) return doneReadingUpdates(end === true ? null : end)

      const { name: refName, new: gitHash } = update

      repo.setRef(refName, gitHash).then(() => {
        readUpdates(null, nextUpdate)
      }).catch(err => {
        // console.error('readUpdates err', err)
        doneReadingUpdates(err)
      })
    })

    readObjects(null, function nextObject(end, object) {
      if (end) return doneReadingObjects(end === true ? null : end)

      pull(
        object.read,
        pull.collect((err, bufs) => {
          if (err) doneReadingObjects(err)
          const buffer = Buffer.concat(bufs, object.length)

          repo.addObject(object, buffer).then((tx) => {
            readObjects(null, nextObject)
          }).catch(err => {
            // console.error('readObjects err', err)
            doneReadingObjects(err)
          })
        })
      )
    })

    done(cb)
  }

})

pull(
  toPull(process.stdin),
  helper,
  toPull(process.stdout, (err) => process.exit())
)